# Updates instructor git remote repo with current Github Token.
function token_update {

    # In unix-like systems, traditionally, exit status code '1' is interpreted as 'false' or 'error' and viceversa
    if [[ ! $(git status) ]]; then
        return 1
    fi

    local current_git_remote_url=$(git config --get remote.origin.url)
    if [[ ! $current_git_remote_url ]]; then
        printf "Found a Git repo but no remote repository added\n"
        return 1
    fi

    local current_git_user_name=$(git config --get user.name)
    local current_git_user_email=$(git config --get user.email)
    local substring="instructor"

    printf "üç¥ - I update current git remote repo if .gitconfig 'user.email' contains *instructor*\n"
    printf "ü™ë Sit tight - Getting current user ...\n"
    printf "Current user: %s! \n" "$current_git_user_name" 
    printf "Current email: %s! \n" "$current_git_user_email" 

    if [[ ! "$current_git_user_email" =~ $substring ]]; then
        printf "‚õî This remote repo: %s should not be tokenized as it does not point to 'instructor'!\n" $current_git_remote_url
        return 1
    fi

    if [[ ! -a ~/.config/PAT.txt ]]; then
        printf "‚õî  Token file not found in %s. Place token file in correct path and try again!\n" $XDG_CONFIG_HOME
        return 1
    fi

    local remote_url=""
    # if current instructor remote repo has a token already
    if [[ "$current_git_remote_url" =~ "@" ]]; then
        remote_url="@$(echo "$current_git_remote_url" | awk -F"@" '{print $2}')"
    else
        remote_url="@$(echo "$current_git_remote_url" | awk -F"//" '{print $2}')"
    fi

    local personal_token_file=~/.config/PAT.txt
    local instructor_token=$(cat $personal_token_file)
    local protocol='https://'
    local new_git_remote_url="${protocol}${instructor_token}${remote_url}"

    printf "-----------------------------------------------------\n"
    printf "git remote url will recieve the following changes:\n"
    printf "From:‚û°Ô∏è %s.\n" "$current_git_remote_url"
    printf "To:  ‚û°Ô∏è %s.\n" "$new_git_remote_url"
    printf "-----------------------------------------------------\n"

    read -q "response?Do you want to proceed? [y/N]"

    printf "\n-----------------------------------------------------\n\n"

    case "$response" in
        y | Y)
            printf "Updating remote repo with token ...\n"
            git remote set-url origin $new_git_remote_url
            printf "done.üòä\n"
            ;;
        *)
            echo "Aborting ..."
            ;;
    esac
}
